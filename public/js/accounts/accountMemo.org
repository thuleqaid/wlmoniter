# -*- coding: utf-8 -*-
* 设计资料：
** 时序图
   #+BEGIN_SRC plantuml :file ./account_seq.svg
   actor Client as c
   participant Server as s
   database MongoDB as db

   note over c, db : 用户注册
   c -> s : 注册\nPOST:/users/register
     s -> db : 添加到ApplyUser数据表
     s <-- db
   c <-- s
   c -> s : 申请用户列表\nGET:/users/apply
   note right : 需要用户管理权限
   c <-- s
   alt 同意用户申请
     c -> s : 同意用户申请\nPOST:/users/apply
       s -> db : 删除ApplyUser记录
       s <-- db
       s -> db : 添加到User数据表
       s <-- db
       s ->s : 发送密码重置邮件
     c <-- s
   else 拒绝用户申请
     c -> s : 拒绝用户申请\nPOST:/users/apply
       s -> db : 删除ApplyUser记录
       s <-- db
     c <-- s
   end

   note over c, db : 登陆/注销
   c -> s : 登陆\nPOST:/users/login
     s -> db : 查找用户
     s <-- db
     s -> s : 验证密码（密码重置Code不为空时，清除密码重置Code）
     s -> db : 删除当前用户的历史访问AccessToken记录
     s <-- db
     note right of s : 同一个用户同时只能在一个浏览器上登陆
     s -> s : 生成随机访问token
     s -> db : 添加当前用户的访问AccessToken记录
     s <-- db
   c <-- s : 访问token\n用户情报
   c -> s : 注销\nPOST:/users/logout
     s -> s : 验证访问token
     s -> db : 删除当前访问AccessToken记录
     s <-- db
   c <-- s

   note over c, db : 修改密码
   c -> s : 修改密码\nPOST:/users/changepassword
     s -> s : 验证访问token
     s -> s : 验证旧密码
     s -> db : 修改User记录
     note right of s : 每次修改User记录，自动把最新的记录保存到HistoryUser数据表中
     s <-- db
     s -> db : 删除当前用户的历史访问AccessToken记录
     s <-- db
   c <-- s
   c -> s : 忘记密码\nPOST:/users/forgotpassword
     s -> s : 生成随机访问密码重置Code
     s -> db : 修改User记录（设置密码重置Code）
     s <-- db
     alt 用户操作
       s ->s : 发送密码重置邮件
       c <-- s
     else 管理员操作
       c <-- s : 密码重置Code
     end
   c -> s : 重置密码\nPOST:/users/resetpassword
     s -> s : 验证密码重置Code
     s -> db : 修改User记录（设置新密码，清除密码重置Code）
     s <-- db
     s -> db : 删除当前用户的历史访问AccessToken记录
     s <-- db
   c <-- s

   note over c, db : 用户列表取得
   c -> s : 用户列表\nGET:/users/api
     s -> s : 验证访问token
     s -> db : 取得当前用户User数据
     s <-- db
     alt 当前用户拥有用户管理权限
       s -> db : 取得所有用户User数据（不包括：密码，密码重置Code）
       s <-- db
     else 一般用户
       s -> db : 取得所有用户User数据（不包括：密码，密码重置Code，工资数据）
       s <-- db
     end
   c <-- s : 用户一览表

   note over c, db : 用户数据修改
   c -> s : 用户数据取得\nGET:/users/api/:id
     s -> s : 验证访问token
     s -> db : 取得当前用户User数据
     s <-- db
     alt 当前用户具有用户管理权限
       s -> db : 更新指定用户User数据（不包括：密码，密码重置Code）
       s <-- db
     else 修改对象是当前用户
       s -> db : 更新指定用户User数据（不包括：密码，密码重置Code）
       s <-- db
     else 其他情况
       s -> db : 更新指定用户User数据（不包括：密码，密码重置Code，工资数据）
       s <-- db
     end
   c <-- s : 用户数据
   c -> s : 用户数据修改\nPUT:/users/api/:id
     s -> s : 验证访问token
     s -> db : 取得当前用户User数据
     s <-- db
     alt 当前用户具有用户管理权限
       s -> db : 更新指定用户User数据（不包括：密码）
       s <-- db
     else 修改对象是当前用户
       s -> db : 更新指定用户User数据（不包括：密码，权限数据，工资数据）
       s <-- db
     else 其他情况
       note right of s : 不修改User数据
     end
   c <-- s
   #+END_SRC
** 路由配置
   1. 访问限制
      #+BEGIN_SRC javascript
      angular.module('XXX', [
        'ionic',
        'ngResource',
        'XXX.services',
        'XXX.controllers'
      ])
      .config(function($stateProvider, $urlRouterProvider) {
        $stateProvider
          .state('XXX', {
            ...
            resolve: {
              'bkUser': ['persistService', '$q', function(persistService, $q) {
                return persistService.get('user') || $q.reject({unAuthorized:true});
              }]
            }
          });
      })
      .run(function($rootScope, transit, authService) {
        $rootScope.$on('$stateChangeError', function(event, toState, toParams, fromState, fromParams, error) {
          if (error.unAuthorized) {
            authService.logout();
            transit.go('account.login');
          }
        });
      });
      #+END_SRC
** service层
   1. authService
      用户注册、登录、注销、密码重置服务
      函数接口：
      + register(email, password, firstname, lastname)
        用户注册（password未使用）
      + login(email, password)
        用户登录
        登录成功时，使用persistService保存返回数据（用户个人信息及访问token）
      + logout()
        用户退出
        删除persistService中保存的数据（用户个人信息及访问token）
      + forgotpassword(email, flag_send_mail)
        遗忘密码处理
        返回密码重置code
      + resetpassword(email, password, resetcode)
        密码重置
      + changepassword(oldpassword, newpassword)
        修改密码
   2. tokenInterceptor
      访问token自动插入数据请求中
   3. User
      用户数据表操作
   4. ApplyUser
      申请用户数据表操作
** controller层
   1. AccountNavController
      导航菜单
      用户注册、注销、密码重置申请、密码修改页面，用户个人信息自动更新
   2. AccountLoginController
      用户登录页面
   3. AccountResetPasswordController
      密码重置页面
   4. AccountUserAdminController
      用户管理页面（需要admin权限）
   5. AccountUserProfileController
      用户信息修改页面（一般用户只能修改自己的，admin权限用户可以修改所有人的）
